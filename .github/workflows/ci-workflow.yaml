name: Build

on:
  push:
    branches:
    - main
    - '!master'
  pull_request:
    branches:
    - main
    - '!master'

permissions:
  contents: write
  id-token: write
  
jobs:
  snyk_analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
        sparse-checkout: 'microservice'
        sparse-checkout-cone-mode: false
    - name: Move microservice files to root
      run: |
        ls -lah
        shopt -s dotglob
        mv microservice/* .
        rm -rf microservice
        ls -lah
    - name: Snyk Scan
      uses: snyk/actions/python@master
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
          args: --severity-threshold=critical
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@master
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   with:
    #     pollingTimeoutSec: 600
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  checkout_and_build:
    needs: [snyk_analysis]
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{steps.latest_tag.outputs.tag}}
    steps:
      - name: repo checkout
        uses: actions/checkout@v4
        with:
         fetch-tags: true
         fetch-depth: 0
         sparse-checkout: 'microservice'
         sparse-checkout-cone-mode: false
      - name: Move microservice files to root
        run: |
          ls -lah
          shopt -s dotglob
          mv microservice/* .
          rm -rf microservice
          ls -lah
      - name: list files
        run: |
          ls -al
      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      - name: get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Latest tag: $latest_tag"

          if [ -z "$latest_tag" ]; then
            new_version="v0.0.1"
          else
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            new_version="v$major.$minor.$patch"
          fi

          echo "New tag: $new_version"
          echo "tag=$new_version" >> $GITHUB_OUTPUT

          git tag "$new_version"
          git push origin "$new_version"
      - name: docker build
        run: |
          docker build -t ${{secrets.ACR_NAME}}.azurecr.io/flaskapp:${{steps.latest_tag.outputs.tag}} .
          docker image ls
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{secrets.ACR_NAME}}.azurecr.io/flaskapp:${{steps.latest_tag.outputs.tag}}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      - name: Login to Azure using OIDC
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Login to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
      - name: docker push to ACR
        run: |
          docker push ${{secrets.ACR_NAME}}.azurecr.io/flaskapp:${{steps.latest_tag.outputs.tag}}
 
  deploy_helm_chart:
    needs: [checkout_and_build]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure using OIDC
        uses: Azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_KUBERNETES_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          allow-no-subscriptions: true
      - name: Get Kubernetes Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --name ${{secrets.AKS_NAME }}
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.33.1' 

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0

      - name: repo checkout
        uses: actions/checkout@v4
        with:
         fetch-tags: true
         fetch-depth: 0

      - name: Deploy helm chart
        run: |
          helm upgrade --install my-app ./flask-application-helm-chart \
          --set image.repository=${{secrets.ACR_NAME}}.azurecr.io/flaskapp --set image.tag=${{ needs.checkout_and_build.outputs.build_tag }}

          
          
  notify_success:
    runs-on: ubuntu-latest
    needs: [snyk_analysis, checkout_and_build, deploy_helm_chart]
    if: ${{ success() }}
    steps:
      - name: Send mail
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SENDING_EMAIL_USERNAME }}
          password: ${{ secrets.SENDING_EMAIL_PASSWORD }}
          subject: ✅ GitHub Actions Success
          to: ${{ secrets.EMAIL_LIST}}
          from: ${{ secrets.SENDING_EMAIL_FROM }}
          body: |
            The workflow in ${{ github.repository }} completed ${{ github.workflow.status }}.
            Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  
  notify_failed:
    runs-on: ubuntu-latest
    needs: [snyk_analysis, checkout_and_build, deploy_helm_chart]
    if: ${{ failure() }}
    steps:
      - name: Send mail
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SENDING_EMAIL_USERNAME }}
          password: ${{ secrets.SENDING_EMAIL_PASSWORD }}
          subject: ‼️ GitHub Actions Failure
          to: ${{ secrets.EMAIL_LIST}}
          from: ${{ secrets.SENDING_EMAIL_FROM }}
          body: |
            The workflow in ${{ github.repository }} failed.
            Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
